from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import datetime, timedelta
import random

from registro_manutencao.models import registrodemanutencao, ImagemRegistro, retorno
from clientes.models import Clientes
from produtos.models import CadastroTipoProduto

class Command(BaseCommand):
    help = 'Cria manuten√ß√µes de teste e testa o sistema'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ Iniciando testes de estresse do sistema de manuten√ß√£o...'))
        
        # Verificar se existem clientes e produtos
        clientes = Clientes.objects.all()
        produtos = CadastroTipoProduto.objects.all()
        
        if not clientes.exists():
            self.stdout.write(self.style.WARNING('‚ùå Nenhum cliente encontrado. Criando cliente de teste...'))
            cliente_teste = Clientes.objects.create(
                nome_fantasia="Cliente Teste",
                razao_social="Cliente Teste LTDA",
                cnpj="12345678000199",
                email="teste@cliente.com"
            )
            clientes = [cliente_teste]
        else:
            clientes = list(clientes)
        
        if not produtos.exists():
            self.stdout.write(self.style.WARNING('‚ùå Nenhum produto encontrado. Criando produto de teste...'))
            produto_teste = CadastroTipoProduto.objects.create(
                nome_produto="GS410 (2G) - Teste",
                descricao="Produto de teste para manuten√ß√£o"
            )
            produtos = [produto_teste]
        else:
            produtos = list(produtos)
        
        # Status poss√≠veis
        status_options = [
            'Pendente',
            'Aprovado',
            'Reprovado pela Diretoria',
            'Aprovado pela Diretoria',
            'Expedi√ß√£o',
            'expedido'
        ]
        
        # Tipos de entrada
        tipos_entrada = [
            'Devolu√ß√£o / Estoque',
            'Garantia',
            'Manuten√ß√£o Preventiva',
            'Manuten√ß√£o Corretiva'
        ]
        
        # Motivos
        motivos = [
            'Defeito de F√°brica',
            'Desgaste Natural',
            'Danos por Uso',
            'Problema de Software',
            'Falha de Hardware'
        ]
        
        # Customiza√ß√µes
        customizacoes = [
            'Padr√£o',
            'Personalizada',
            'Especial',
            'Industrial'
        ]
        
        # Tipos de contrato
        tipos_contrato = [
            'Garantia',
            'P√≥s-Venda',
            'Contrato Anual',
            'Avulso'
        ]
        
        self.stdout.write('üìä Criando 15 manuten√ß√µes de teste...')
        
        manutencoes_criadas = []
        
        for i in range(15):
            try:
                # Dados aleat√≥rios
                cliente = random.choice(clientes)
                produto = random.choice(produtos)
                status = random.choice(status_options)
                tipo_entrada = random.choice(tipos_entrada)
                motivo = random.choice(motivos)
                customizacao = random.choice(customizacoes)
                tipo_contrato = random.choice(tipos_contrato)
                
                # Criar manuten√ß√£o
                manutencao = registrodemanutencao.objects.create(
                    nome=cliente,
                    tipo_entrada=tipo_entrada,
                    tipo_produto=produto,
                    motivo=motivo,
                    tipo_customizacao=customizacao,
                    recebimento='Recebido',
                    entregue_por_retirado_por='Cliente',
                    id_equipamentos=f"ID{i+1:03d}, ID{i+2:03d}, ID{i+3:03d}",
                    quantidade=random.randint(1, 10),
                    tipo_contrato=tipo_contrato,
                    customizacaoo=customizacao,
                    numero_equipamento=f"EQ{i+1:04d}, EQ{i+2:04d}",
                    observacoes=f"Observa√ß√µes de teste para manuten√ß√£o {i+1}. Sistema funcionando corretamente.",
                    tratativa='An√°lise T√©cnica',
                    status=status,
                    status_tratativa='Em Andamento',
                    data_devolucao=timezone.now() + timedelta(days=random.randint(1, 30))
                )
                
                manutencoes_criadas.append(manutencao)
                self.stdout.write(f'‚úÖ Manuten√ß√£o {i+1} criada - ID: {manutencao.id} - Status: {status}')
                
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå Erro ao criar manuten√ß√£o {i+1}: {e}'))
        
        self.stdout.write(self.style.SUCCESS(f'üéâ {len(manutencoes_criadas)} manuten√ß√µes criadas com sucesso!'))
        
        # Testar altera√ß√£o de status
        self.stdout.write('\nüîÑ Testando altera√ß√£o de status...')
        
        manutencoes = registrodemanutencao.objects.all()
        
        if manutencoes.exists():
            status_sequence = [
                'Pendente',
                'Aprovado',
                'Aprovado pela Diretoria',
                'Expedi√ß√£o',
                'expedido'
            ]
            
            self.stdout.write(f'üìã Testando altera√ß√£o de status em {min(5, manutencoes.count())} manuten√ß√µes...')
            
            for i, manutencao in enumerate(manutencoes[:5]):  # Testar apenas 5
                try:
                    # Alterar status sequencialmente
                    for status in status_sequence:
                        manutencao.status = status
                        manutencao.save()
                        self.stdout.write(f'‚úÖ Manuten√ß√£o {manutencao.id}: Status alterado para "{status}"')
                    
                    self.stdout.write(f'üéØ Manuten√ß√£o {manutencao.id} - Ciclo completo de status testado')
                    
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'‚ùå Erro ao alterar status da manuten√ß√£o {manutencao.id}: {e}'))
            
            self.stdout.write('‚úÖ Teste de altera√ß√£o de status conclu√≠do!')
        
        # Mostrar estat√≠sticas
        self.stdout.write('\nüìà Estat√≠sticas do Sistema:')
        
        total_manutencoes = registrodemanutencao.objects.count()
        self.stdout.write(f'üìä Total de manuten√ß√µes: {total_manutencoes}')
        
        # Estat√≠sticas por status
        for status in ['Pendente', 'Aprovado', 'Aprovado pela Diretoria', 'Expedi√ß√£o', 'expedido']:
            count = registrodemanutencao.objects.filter(status=status).count()
            self.stdout.write(f'üìä Status "{status}": {count}')
        
        # Estat√≠sticas por tipo de entrada
        tipos = registrodemanutencao.objects.values_list('tipo_entrada', flat=True).distinct()
        for tipo in tipos:
            count = registrodemanutencao.objects.filter(tipo_entrada=tipo).count()
            self.stdout.write(f'üìä Tipo "{tipo}": {count}')
        
        # Manuten√ß√µes recentes
        recentes = registrodemanutencao.objects.order_by('-data_criacao')[:5]
        self.stdout.write(f'\nüïí √öltimas 5 manuten√ß√µes:')
        for manutencao in recentes:
            self.stdout.write(f'   ID: {manutencao.id} - {manutencao.nome.nome_fantasia} - {manutencao.status} - {manutencao.data_criacao.strftime("%d/%m/%Y %H:%M")}')
        
        self.stdout.write(self.style.SUCCESS('\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!'))




