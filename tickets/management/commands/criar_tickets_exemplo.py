from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from tickets.models import TicketModel

class Command(BaseCommand):
    help = 'Cria tickets de exemplo para testar o sistema'

    def handle(self, *args, **options):
        # Verificar se j√° existem tickets
        if TicketModel.objects.exists():
            self.stdout.write(
                self.style.WARNING('J√° existem tickets no sistema. Pulando cria√ß√£o de exemplos.')
            )
            return

        # Buscar ou criar usu√°rio de exemplo
        user, created = User.objects.get_or_create(
            username='usuario_teste',
            defaults={
                'email': 'teste@example.com',
                'first_name': 'Usu√°rio',
                'last_name': 'Teste',
                'is_staff': False
            }
        )

        # Tickets de exemplo
        tickets_exemplo = [
            {
                'titulo': 'Erro ao salvar requisi√ß√£o',
                'descricao_erro': 'Ao tentar salvar uma nova requisi√ß√£o, o sistema apresenta erro 500. O erro ocorre especificamente quando seleciono o produto "TESTE - WERE IS MY CARGO" e preencho a quantidade de equipamentos.',
                'setor': 'Configura√ß√£o',
                'prioridade': 'Alta',
                'status': 'Pendente'
            },
            {
                'titulo': 'Problema com valida√ß√£o de estoque',
                'descricao_erro': 'O sistema n√£o est√° validando corretamente o estoque dispon√≠vel. √â poss√≠vel criar requisi√ß√µes mesmo quando n√£o h√° estoque suficiente.',
                'setor': '√Årea T√©cnica',
                'prioridade': 'Cr√≠tica',
                'status': 'Em Andamento'
            },
            {
                'titulo': 'Relat√≥rio de tickets n√£o est√° funcionando',
                'descricao_erro': 'Ao tentar gerar o relat√≥rio de tickets por per√≠odo, o sistema retorna uma p√°gina em branco. Testei com diferentes per√≠odos e o problema persiste.',
                'setor': 'Intelig√™ncia',
                'prioridade': 'M√©dia',
                'status': 'Pendente'
            },
            {
                'titulo': 'Interface lenta no mobile',
                'descricao_erro': 'A interface do sistema est√° muito lenta quando acessada pelo celular. Especificamente na p√°gina de listagem de requisi√ß√µes, demora mais de 10 segundos para carregar.',
                'setor': '√Årea T√©cnica',
                'prioridade': 'M√©dia',
                'status': 'Resolvido'
            },
            {
                'titulo': 'Falta campo de observa√ß√µes',
                'descricao_erro': 'No formul√°rio de cria√ß√£o de requisi√ß√µes, seria √∫til ter um campo de observa√ß√µes adicionais para incluir informa√ß√µes extras sobre a solicita√ß√£o.',
                'setor': 'Comercial',
                'prioridade': 'Baixa',
                'status': 'Pendente'
            }
        ]

        # Criar tickets
        for i, ticket_data in enumerate(tickets_exemplo, 1):
            ticket = TicketModel.objects.create(
                usuario=user,
                titulo=ticket_data['titulo'],
                descricao_erro=ticket_data['descricao_erro'],
                setor=ticket_data['setor'],
                prioridade=ticket_data['prioridade'],
                status=ticket_data['status']
            )
            
            # Adicionar corre√ß√£o e devolutiva para tickets resolvidos
            if ticket.status == 'Resolvido':
                ticket.correcao = 'Otimizamos as consultas ao banco de dados e implementamos cache para melhorar a performance em dispositivos m√≥veis.'
                ticket.devolutiva = 'Problema resolvido! A interface agora est√° mais r√°pida em dispositivos m√≥veis. Teste e nos informe se ainda h√° algum problema.'
                ticket.save()

            self.stdout.write(
                self.style.SUCCESS(f'Ticket #{ticket.id} criado: {ticket.titulo}')
            )

        self.stdout.write(
            self.style.SUCCESS(f'\n‚úÖ {len(tickets_exemplo)} tickets de exemplo criados com sucesso!')
        )
        self.stdout.write(
            self.style.SUCCESS('üé´ Acesse o sistema de tickets para visualizar os exemplos.')
        )
